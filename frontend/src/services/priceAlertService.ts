// Price Alert Service
import { apiService } from './api';
import { API_ENDPOINTS } from '../constants/api';
import type { PriceAlert } from '../types/priceAlert';

/**
 * Price Alert Service
 *
 * Note: Price alerts are automatically generated by the backend when monitoring
 * saved searches. Users cannot create, update, or delete price alerts directly.
 * They can only view alerts and mark them as read.
 */
export class PriceAlertService {
  /**
   * Get all price alerts for the current user
   * @param unreadOnly - If true, only return unread alerts
   */
  async getPriceAlerts(unreadOnly: boolean = false): Promise<PriceAlert[]> {
    const endpoint = unreadOnly
      ? `${API_ENDPOINTS.PRICE_ALERTS}?unreadOnly=true`
      : API_ENDPOINTS.PRICE_ALERTS;
      
    const response = await apiService.get<PriceAlert[]>(endpoint);

    if (!response.success) {
      throw new Error(response.error || 'Failed to get price alerts');
    }

    return response.data || [];
  }

  /**
   * Mark a price alert as read
   * @param alertId - The ID of the alert to mark as read
   */
  async markAlertAsRead(alertId: string): Promise<void> {
    const endpoint = `${API_ENDPOINTS.PRICE_ALERTS}/${alertId}/read`;
    const response = await apiService.put(endpoint, {});

    if (!response.success) {
      throw new Error(response.error || 'Failed to mark alert as read');
    }
  }

  /**
   * Get unread alert count for the current user
   */
  async getUnreadCount(): Promise<number> {
    const alerts = await this.getPriceAlerts(true);
    return alerts.length;
  }
}

export const priceAlertService = new PriceAlertService();